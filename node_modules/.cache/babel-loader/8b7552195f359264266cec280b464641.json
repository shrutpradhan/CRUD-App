{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nexport const getPost = createAsyncThunk(\"post/getPost\", async _ref => {\n  let {\n    id\n  } = _ref;\n  return fetch(`https://jsonplaceholder.typicode.com/posts/${id}`).then(res => res.json());\n});\nexport const deletePost = createAsyncThunk(\"post/deletePost\", async _ref2 => {\n  let {\n    id\n  } = _ref2;\n  return fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {\n    method: \"DELETE\"\n  }).then(res => res.json());\n});\nexport const createPost = createAsyncThunk(\"post/createPost\", async _ref3 => {\n  let {\n    values\n  } = _ref3;\n  return fetch(`https://jsonplaceholder.typicode.com/posts`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      title: values.title,\n      body: values.body\n    })\n  }).then(res => res.json());\n});\nexport const updatePost = createAsyncThunk(\"post/updatePost\", async _ref4 => {\n  let {\n    id,\n    title,\n    body\n  } = _ref4;\n  return fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {\n    method: \"PUT\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      title,\n      body\n    })\n  }).then(res => res.json());\n});\nconst PostSlice = createSlice({\n  name: \"post\",\n  initialState: {\n    post: [],\n    loading: false,\n    error: null,\n    body: \"\",\n    edit: false\n  },\n  reducers: {\n    setEdit: (state, action) => {\n      state.edit = action.payload.edit;\n      state.body = action.payload.body;\n    }\n  },\n  extraReducers: {\n    [getPost.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [getPost.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.post = [action.payload];\n    },\n    [getPost.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    [deletePost.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [deletePost.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.post = [action.payload];\n    },\n    [deletePost.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    [createPost.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [createPost.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.post = [action.payload];\n    },\n    [createPost.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    [updatePost.pending]: (state, action) => {\n      state.loading = true;\n    },\n    [updatePost.fulfilled]: (state, action) => {\n      state.loading = false;\n      state.post = [action.payload];\n    },\n    [updatePost.rejected]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setEdit\n} = PostSlice.actions;\nexport default PostSlice.reducer;","map":{"version":3,"sources":["C:/Users/shrad/Downloads/Microsoft VS Code/Front end/CRUD-APP-React-ReduxToolkit/src/redux/features/PostSlice.js"],"names":["createSlice","createAsyncThunk","getPost","id","fetch","then","res","json","deletePost","method","createPost","values","headers","Accept","body","JSON","stringify","title","updatePost","PostSlice","name","initialState","post","loading","error","edit","reducers","setEdit","state","action","payload","extraReducers","pending","fulfilled","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nexport const getPost = createAsyncThunk(\"post/getPost\", async ({ id }) => {\r\n  return fetch(`https://jsonplaceholder.typicode.com/posts/${id}`).then((res) =>\r\n    res.json()\r\n  );\r\n});\r\nexport const deletePost = createAsyncThunk(\r\n  \"post/deletePost\",\r\n  async ({ id }) => {\r\n    return fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {\r\n      method: \"DELETE\",\r\n    }).then((res) => res.json());\r\n  }\r\n);\r\nexport const createPost = createAsyncThunk(\r\n  \"post/createPost\",\r\n  async ({ values }) => {\r\n    return fetch(`https://jsonplaceholder.typicode.com/posts`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        title: values.title,\r\n        body: values.body,\r\n      }),\r\n    }).then((res) => res.json());\r\n  }\r\n);\r\nexport const updatePost = createAsyncThunk(\r\n  \"post/updatePost\",\r\n  async ({ id, title, body }) => {\r\n    return fetch(`https://jsonplaceholder.typicode.com/posts/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        title,\r\n        body,\r\n      }),\r\n    }).then((res) => res.json());\r\n  }\r\n);\r\n\r\nconst PostSlice = createSlice({\r\n  name: \"post\",\r\n  initialState: {\r\n    post: [],\r\n    loading: false,\r\n    error: null,\r\n    body: \"\",\r\n    edit: false,\r\n  },\r\n  reducers: {\r\n    setEdit: (state, action) => {\r\n      state.edit = action.payload.edit;\r\n      state.body = action.payload.body;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getPost.pending]: (state, action) => {\r\n      state.loading = true;\r\n    },\r\n    [getPost.fulfilled]: (state, action) => {\r\n      state.loading = false;\r\n      state.post = [action.payload];\r\n    },\r\n    [getPost.rejected]: (state, action) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n    [deletePost.pending]: (state, action) => {\r\n      state.loading = true;\r\n    },\r\n    [deletePost.fulfilled]: (state, action) => {\r\n      state.loading = false;\r\n      state.post = [action.payload];\r\n    },\r\n    [deletePost.rejected]: (state, action) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n    [createPost.pending]: (state, action) => {\r\n      state.loading = true;\r\n    },\r\n    [createPost.fulfilled]: (state, action) => {\r\n      state.loading = false;\r\n      state.post = [action.payload];\r\n    },\r\n    [createPost.rejected]: (state, action) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n    [updatePost.pending]: (state, action) => {\r\n      state.loading = true;\r\n    },\r\n    [updatePost.fulfilled]: (state, action) => {\r\n      state.loading = false;\r\n      state.post = [action.payload];\r\n    },\r\n    [updatePost.rejected]: (state, action) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\nexport const { setEdit } = PostSlice.actions;\r\nexport default PostSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}